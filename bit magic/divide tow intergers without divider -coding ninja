@this is iterative method and mine is recursive both are good 
0(n) || o(1)

#include <bits/stdc++.h> 
int divideTwoInteger(int dividend, int divisor) {
    int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;
 dividend = abs(dividend);
 divisor = abs(divisor);
 int quotient = 0;
 while (dividend >= divisor) {
   dividend -= divisor;      // perform subtraction untill divisor is less than                                                          dividend 
   ++quotient;         //no of times subtraction will return my quiotient
 }
 return quotient * sign;
} 

@MY METHOD 
#include <bits/stdc++.h> 
int divideTwoInteger(int dividend, int divisor) {
	bool neg=false;
    if(dividend<0 || divisor<0)
    {
        neg=true;
        if(dividend <0 and divisor<0)
            neg=false;
    }
    dividend=abs(dividend);
    divisor=abs(divisor);
       
    if(dividend<divisor)
        return 0;
    if(!neg){ 
    if(divisor ==dividend)
        return 1;
    }
    
    int ans=divideTwoInteger(dividend-divisor,divisor) +divideTwoInteger(divisor,divisor);
    if(neg)
        return (-ans);
    else
    return ans;
} 
