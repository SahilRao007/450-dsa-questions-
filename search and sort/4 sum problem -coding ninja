@ 0(n2logn) || o(n)..space for storing the sum //n2 for looping and logn for inserting in map 

#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
string fourSum(vector<int> arr, int target, int n) {
    string index="";
    sort(arr.begin(),arr.end());
    unordered_map<int,pair<int,int>>mpp; //sum , value index
   for(int i=0;i<n-1;i++)
   {
       for(int j=1;j<n;j++)
       {int sum=arr[i]+arr[j];
        if(mpp.find(sum)==mpp.end())
        mpp[sum]=make_pair(i,j);}
           
   }
    for(int i=0;i<n-1;i++)
    {    
        for(int j=i+1;j<n;j++)
        {    
            
            int sum=target-(arr[i]+arr[j]);
            if(mpp.find(sum)!=mpp.end())
            {
                int v1=mpp[sum].first;
                int v2=mpp[sum].second;
                if(v1!=i and v1!=j and 
                   v2!=i and v2!=j)
                {
                    
                    return "Yes";
                }
            } 
        }
    }
    return "No";
}

@2nd method is o(n3) ||o(1)
#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
string fourSum(vector<int> arr, int target, int n) {
    sort(arr.begin(),arr.end());
    for(int i=0;i<n-2;i++)
    {
        for(int j=1;j<n-1;j++)
        {
            int fsum=arr[i]+arr[j];
            int low=j+1;
            int high=n-1;
           
            while(low<high)
            {
                int lsum=arr[low]+arr[high];
                if(fsum+lsum ==target)
                    return "Yes";
                else if(fsum +lsum>target)
                    high--;
                else
                    low++;
            }            
        }
    }
    return "No";
}

