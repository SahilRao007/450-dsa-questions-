@best method 
0(logn) || 0(n)
int minSwaps(vector<int> &arr)
{
	vector<int>temp=arr;
    sort(temp.begin(),temp.end());
    int ans=0,n=arr.size();
    map<int,int>mp;
    for(int i=0;i<n;i++)
    {mp[arr[i]]=i;}
    for(int i=0;i<n;i++)
    {
        if(arr[i]!=temp[i])
        {
            ans++;
            int x=arr[i];
            swap(arr[i],arr[mp[temp[i]]]);
            mp[x]=mp[temp[i]];
            mp[temp[i]]=i;            
        }
    }
    return ans;
}

@2nd method (selection sort )my method 
0(n2) || 0(1)
int minSwaps(vector<int> &arr)
{    int ans=0;
	int idx=0;
    int st=0;
    int n=arr.size();
    
    while(st<n)
    {int min=INT_MAX;
     int i=st;int pos=0;
        while(i<n)
        {
            if(min>=arr[i]){min=arr[i];pos=i;}
            i++;
        }
     if(st!=pos){swap(arr[st],arr[pos]);ans++;}
     st++;
    }
 return ans;
}
