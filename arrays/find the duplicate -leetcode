@link for the explaination :-https://www.youtube.com/watch?v=GOYMcrvg-Ck&ab_channel=KnowledgeCenter

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        int max_idx=0;
        int curr=0;
        for(int i=0;i<n;i++)
        {
            int id=nums[i]%n;
            nums[id]+=n;
            
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]>curr)
            {
                curr=nums[i];
                max_idx=i;
            }
            nums[i]%=n;
        }
        return max_idx;
    }
};
@2nd mehtod is using slow and fast method as its cyclic 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       int slow=nums[0];
        int fast=nums[0];
        
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
};
