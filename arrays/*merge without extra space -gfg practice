!its time complexity is O(m+n)(log(m+n)) == O(nlogn +mlogm)
class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
           int i,j,k;
           i=j=0;
           k=n - 1;
           while(i<=k and j<m)
           {
               if(arr1[i]<arr2[j])
               i++;
               else
               swap(arr1[k--],arr2[j++]);
           }
           sort(arr1,arr1+n);
           sort(arr2,arr2+m);
           
        } 
};
@there is another method using insertion sort tutorial at(tech dose merge 2 sorted array ) 
time complexity is O(m*n)

class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            for(int i=m- 1;i>=0;i--)
            {
                int ele=arr2[i];
                int j=n- 2;
                int last=arr1[n- 1];
                while(j>=0 and arr1[j]>ele)
                {
                    arr1[j+ 1]=arr1[j];
                    j--;
                }
                if(j!=n - 2 or last>ele)
                {
                    arr1[j+ 1]=ele;
                    arr2[i]=last;
                }
            }
        } 
};

@there is another method to solve it in max(nlogn,mlogm);
in gfg article 

