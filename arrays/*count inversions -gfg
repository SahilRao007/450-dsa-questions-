long long int merge(long long arr[],long long l,long long m,long long r)

    {

        long long n1=m-l+1,n2=r-m;

        long long  left[n1],right[n2];

        for(long long i=0;i<n1;i++)

        {

            left[i]=arr[l+i];

        }

        for(long long i=0;i<n2;i++)

        {

            right[i]=arr[m+1+i];

        }

        long long int res=0;

        long long i=0,j=0,k=l;

        while(i<n1&&j<n2)

        {

            if(left[i]<=right[j]){arr[k]=left[i];i++;}

            else{arr[k]=right[j];j++;res=res+(n1-i);}

            k++;

        }

        while(i<n1){arr[k]=left[i];i++;k++;}

        while(j<n2){arr[k]=right[j];j++;k++;}

        return res;

    }

    long long int mergesort(long long  arr[],long long  l ,long long int r)

    {

        long long int res=0;

        if(l<r)

        {

            long long m=l+(r-l)/2;

            res+=mergesort(arr,l,m);

            res+=mergesort(arr,m+1,r);

            res+=merge(arr,l,m,r);

        }

        return res;

    }

    

    long long int inversionCount(long long arr[], long long N)

    {

      return  mergesort(arr,0, N-1);

    

        // Your Code Here

    }
