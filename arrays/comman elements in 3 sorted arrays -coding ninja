@time complexity will be O(max(n1,n2) +max(n2,n3)) or O(n1 + n2 + n3)
space will be n1 + n2 + n3

#include <bits/stdc++.h> 
vector<int> intersection(vector<int> arr1,vector<int> arr2)
{
    vector<int>ans;
    int i=0,j=0;
    while(i<arr1.size() and j<arr2.size())
    {
        if(arr1[i]<arr2[j])
            i++;
        else if(arr1[i]>arr2[j])
            j++;
        else{
            ans.push_back(arr1[i]);
            i++;
            j++;
        }
    }
    return ans;
}
vector<int> findCommonElements(vector<int> &a, vector<int> &b, vector<int> &c)
{
   
    vector<int>c1=intersection(a,b);
    vector<int>ans=intersection(c1,c);
    ans.erase(unique(ans.begin(),ans.end()),ans.end());
    return ans;
}
@2nd method is using the map as we used in comman elements in an matrix row 
